
require 'vagrant-aws'

class Hash
  def slice(*keep_keys)
    h = {}
    keep_keys.each { |key| h[key] = fetch(key) if has_key?(key) }
    h
  end unless Hash.method_defined?(:slice)
  def except(*less_keys)
    slice(*keys - less_keys)
  end unless Hash.method_defined?(:except)
end
...

# Create and configure the AWS instance(s)
Vagrant.configure("2") do |config|

  # Use rsync for sync folders
  #config.vm.synced_folder ".", "/vagrant", disabled: false, type: 'rsync'
  config.vm.synced_folder '.', '/vagrant', disabled: true

  
  # Use dummy AWS box
  config.vm.box = "aws-dummy"

  # Specify AWS provider configuration
  config.vm.provider :aws do |aws, override|
    # Read AWS authentication information from environment variables
    aws.access_key_id = ENV["AWS_ACCESS_KEY_ID"]
    aws.secret_access_key = ENV["AWS_SECRET_ACCESS_KEY"]

    # Specify SSH keypair to use
    aws.keypair_name = "tmobbs-vagrant-ssh-key"

    # Specify region, AMI ID, and security group(s)
    aws.region = "us-west-1"
    #centos 7.9 AMI
    aws.ami = "ami-08d2d8b00f270d03b"
    aws.subnet_id = "subnet-0bad1aee1b054d0d1"
    aws.security_groups = ["sg-0862254da82b4a4e8"]
    aws.instance_type = "m3.medium"
    aws.associate_public_ip = true


    aws.tags = {
      'Name' => 'tmobbs-vagrant-centos-ec2',
      'Automation' => 'vagrant',
      'Environment' => 'sandbox',
      'ansible_id' => 'ubuntu'
    }

    # Specify username and private key path
    override.ssh.username = "centos"
    override.ssh.private_key_path = "../vagrant.key"
  end

  # First, install python
  config.vm.provision "shell" do |s|
    s.inline = "sudo yum -y update && sudo yum -y install epel-release && sudo yum -y install python-pip"
  end

  #You would need to use ansible_local if your host machine is windows , but you would not be able to provision a windows guest.
  provisioner = :ansible

  config.vm.provision provisioner do |ansible|
    ansible.become = true
    ansible.playbook       = "playbooks/site.yml"
    ansible.limit          = "all" # or only "nodes" group, etc.
    ansible.inventory_path = "inventories/ansible_plugins"
    ansible.compatibility_mode = "2.0"
    ansible.galaxy_role_file = "requirements.yml"
    ansible.galaxy_roles_path = "./galaxy/roles"
    ansible.galaxy_command = "ansible-galaxy install --role-file=%{role_file} --roles-path=%{roles_path} --force"

    # ansible.start_at_task = "Install datadog java client"
    # ansible.verbose = "-vvvv"
    # ansible.ask_vault_pass = true
    # ansible.tags = ["test"]

  end

end

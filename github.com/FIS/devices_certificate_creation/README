# Automatically provision IoT devices securely and at scale with DPS

## Steps

* Configure Lab Prerequisites (required Azure resources)
* Generate and Configure X.509 CA Certificates using OpenSSL
* Configure simulated device with X.509 certificate
* Test the Simulated Device
* Deprovision a Group Enrollment

## Lab Instructions

### Exercise 1: Configure Lab Prerequisites

1. Once the deployment has completed, in the left navigation area, to review any output values from the template,  click **Outputs**.

    Make a note of the outputs for use later:

    * connectionString
    * dpsScopeId

The resources have now been created.

### Generate and Configure X.509 CA Certificates using OpenSSL

In this exercise, you will generate an X.509 CA Certificate using OpenSSL. This certificate will be used to configure the Group Enrollment within the Device Provisioning Service (DPS).

#### Generate the certificates

    The helper script and supporting files are being downloaded from the **Azure/azure-iot-sdk-c** open source project hosted on Github, which is a component of the Azure IoT Device SDK. The **certGen.sh** helper script will provide you with a chance to see how CA Certificates are used without diving too deeply into the specifics of OpenSSL configuration (which is outside the scope of this course).

    For additional instructions on using this helper script, and for instructions on how to use PowerShell instead of Bash, please see this link: [https://github.com/Azure/azure-iot-sdk-c/blob/master/tools/CACertificates/CACertificateOverview.md](https://github.com/Azure/azure-iot-sdk-c/blob/master/tools/CACertificates/CACertificateOverview.md)

1. To generate the root and intermediate certificates, enter the following command:

    ```sh
    ./certGen.sh create_root_and_intermediate
    ```

    Notice that you ran the script with the `create_root_and_intermediate` option. This command assumes that you are running the script from within the `~/certificates` directory.

    This command generated a Root CA Certificate named `fis.root.ca.cert.pem` and placed it within a `./certs` directory (under the certificates directory that you created).

#### Task 2: Configure DPS to trust the root certificate

1. In the Azure portal, open your Device Provisioning Service.

    The Device Provisioning Service is accessible from the Resources tile on your dashboard by clicking `FIS-IoTHub-Dps`.

1. On the left-side menu of the **FIS-IoTHub-Dps** blade, under **Settings**, click **Certificates**.

2. Copy the `fis.root.ca.cert.pem` to the terraform folder and run `terraform apply`

3. To start the process of verifying Proof of Possession of the certificate, click **root-ca-cert**.

4. At the bottom of the **Certificate Details** pane, click **Generate Verification Code**.

    You may need to scroll down to see the **Generate Verification Code** button.

    When you click the button it will place the generated code ino the Verification Code field (located just above the button).

5. To the right of **Verification Code**, click **Copy to clipboard**.

    Proof of Possession of the CA certificate is provided to DPS by uploading a certificate generated from the CA certificate with the verification code that was just generated within DPS. This is how you provide proof that you actually own the CA Certificate.

    > **IMPORTANT**: You will need to leave the **Certificate Details** pane open while you generate the verification certificate. If you close the pane, you will invalidate the verification code, and will need to generate a new one.

6. To create the verification certificate, enter the following command:

    ```sh
    ./certGen.sh create_verification_certificate <verification-code>
    ```

    Be sure to replace the `<verification-code>` placeholder with the **Verification Code** generated by the Azure portal.

    For example, the command that you run will look similar to the following:

    ```sh
    ./certGen.sh create_verification_certificate 49C900C30C78D916C46AE9D9C124E9CFFD5FCE124696FAEA
    ```

    This generates a _verification certificate_ that is chained to the CA certificate. The subject of the certificate is the verification code. The generated Verification Certificate named `verification-code.cert.pem` is located within the `./certs` directory of the Azure Cloud Shell.

7. Switch back to the **Certificate Details** pane.

    This pane of your DPS service should still be open in the Azure portal.

8. At the bottom the **Certificate Details** pane, below and to the right of **Verification Certificate .pem or .cer file.**, click **Open**.

9. In the Open file dialog, navigate to your downloads folder, click **verification-code.cert.pem**, and then click **Open**.

10. At the bottom the **Certificate Details** pane, click **Verify**.

11. On the **Certificates** pane, ensure that the **Status** for the certificate is now set to **Verified**.

    You may need to click **Refresh** at the top of the pane (to the right of the **Add** button) to see this change.

#### Create Group Enrollment (X.509 Certificate) in DPS

In this task, you will create a new enrollment group within the Device Provisioning Service (DPS) that uses X.509 certificate attestation.

1. On the left-side menu of the **FIS-IoTHub-Dps** blade, under **Settings**, click **Manage enrollments**.

2. At the top of the **Manage enrollments** pane, click **Add enrollment group**.

    Recall that an enrollment group is basically a record of the devices that may register through auto-provisioning.

3. On the **Add Enrollment Group** blade, under **Group name**, enter **FIS-Dps-EnrollmentGroup**

4. Ensure that the **Attestation Type** is set to **Certificate**.

5. Ensure that the **Certificate Type** field is set to **CA Certificate**.

6. In the **Primary Certificate** dropdown, select the CA certificate that was uploaded to DPS previously, likely **root-ca-cert**.

7. Leave the **Secondary Certificate** dropdown set to **No certificate selected**.

    The secondary certificate is generally used for certificate rotation, to accommodate expiring certificates or certificates that have been compromised. You can find more information on rolling certificates here: [https://docs.microsoft.com/en-us/azure/iot-dps/how-to-roll-certificates](https://docs.microsoft.com/en-us/azure/iot-dps/how-to-roll-certificates)

8. Leave the **Select how you want to assign devices to hubs** field set to **Evenly weighted distribution**.

    In large environments where you have multiple distributed hubs, this setting will control how to choose what IoT Hub should receive this device enrollment. You will have a single IoT Hub associated with the enrollment in this lab, so how you assign devices to IoT hubs doesn't really apply within this lab scenario.

9. Notice that the **Select the IoT hubs this group can be assigned to** dropdown has your **FIS-IoTHub** IoT Hub selected.

    This field is used to ensure that when the device is provisioned, it gets added to the correct IoT Hub.

10. Leave the **Select how you want device data to be handled on re-provisioning** field set to **Re-provision and migrate data**.

    This field gives you high-level control over the re-provisioning behavior, where the same device (as indicated through the same Registration ID) submits a later provisioning request after already being provisioned successfully at least once.

11. In the **Initial Device Twin State** field, modify the JSON object as follows:

    ```json
    {
        "tags": {},
        "properties": {
            "desired": {
                "telemetryDelay": "1"
            }
        }
    }
    ```

    This JSON data represents the initial configuration of device twin desired properties for any device that participates in this enrollment group.

    The devices will use the `properties.desired.telemetryDelay` property to set the time delay for reading and sending telemetry to IoT Hub.

12. Leave **Enable entry** set to **Enable**.

    Generally, you'll want to enable new enrollment entries and keep them enabled.

13. At the top of the **Add Enrollment Group** blade, click **Save**.

### Configure simulated device with X.509 certificate

In this exercise, you will generate a device certificate using the root certificate, and configure a simulated device that connects by using the device certificate for attestation.

#### Generate a device certificate

1. To generate an X.509 device certificate within the CA certificate chain, enter the following command:

    ```sh
    ./certGen.sh create_device_certificate sensor-thl-2000
    ```

    This command will create a new X.509 certificate that's signed by the CA certificate that was generated previously. Notice that the device id (`sensor-thl-2000`) is passed to the `create_device_certificate` command of the `certGen.sh` script. This device id will be set within the _common name_, or `CN=`, value of the device certificate. This certificate will generate a leaf device X.509 certificate for your simulated device, and will be used to authenticate the device with the Device Provisioning Service (DPS).

    Once the `create_device_certificate` command has completed, the generated X.509 device certificate will be named `new-device.cert.pfx`, and will be located within the `/certs` sub-directory.

    > **Note**: This command overwrites any existing device certificate in the `/certs` sub-directory. If you want to create a certificate for multiple devices, ensure that you save a copy of the `new-device.cert.pfx` each time you run the command.

2. To rename the device certificate that you just created, enter the following commands:

    ```sh
    mv ~/certificates/certs/new-device.cert.pfx ~/certificates/certs/sensor-thl-2000-device.cert.pfx
    mv ~/certificates/certs/new-device.cert.pem ~/certificates/certs/sensor-thl-2000-device.cert.pem
    ```

3. To create an additional device certificate, enter the following commands:

    ```sh
    ./certGen.sh create_device_certificate sensor-thl-2001
    mv ~/certificates/certs/new-device.cert.pfx ~/certificates/certs/sensor-thl-2001-device.cert.pfx
    mv ~/certificates/certs/new-device.cert.pem ~/certificates/certs/sensor-thl-2001-device.cert.pem
    ```

#### Configure a simulated device

In this task, you will complete the following:

* Get the ID Scope from DPS that will be placed in code
* Copy the downloaded device certificate into the root folder of the application
* Configure the application in Visual Studio Code

1. In the Azure portal, open your Device Provisioning Service blade and ensure that the **Overview** pane is selected.

2. On the **Overview** pane, copy the **ID Scope** for the Device Provisioning Service, and save it for later reference.

    There is a copy button to the right of the value that will appear when you hover over the value.

    The **ID Scope** will be similar to this value: `0ne0004E52G`

3. Open Windows File Explorer, and then navigate to the folder where the `sensor-thl-2000-device.cert.pfx` certificate file was downloaded.

4. Use File Explorer to create a copy of the 2 device certificate files.

    It will save some time to copy both certificate files now, but you will only be using the first one, `sensor-thl-2000-device.cert.pfx`, in the code project that you build initially.

5. In the **Open Folder** dialog, navigate to each folder Automatic_Enrollment_of_Devices_in_DPS_device1 or Automatic_Enrollment_of_Devices_in_DPS_device2 (Automatic Enrollment of Devices in DPS).

6. Click **ContainerDevice**, and then click **Select Folder**.

    You should see the following files listed in the EXPLORER pane of Visual Studio Code:

    * ContainerDevice.csproj
    * Program.cs
    * sensor-thl-2000-device.cert.pfx

    **Note**: The other device certificate files that you copied to this folder will be used later in this lab, but for now you will focus on implementing just the first device certificate file.

1. In the **EXPLORER** pane, to open the ContainerDevice.csproj file, click **ContainerDevice.csproj**.

1. In the code editor pane, within the `<ItemGroup>` tag, update the certificate file name as follows:

    ```xml
    <ItemGroup>
        <None Update="sensor-thl-2000-device.cert.pfx" CopyToOutputDirectory="PreserveNewest" />
        <PackageReference Include="Microsoft.Azure.Devices.Client" Version="1.*" />
        <PackageReference Include="Microsoft.Azure.Devices.Provisioning.Transport.Mqtt" Version="1.*" />
        <PackageReference Include="Microsoft.Azure.Devices.Provisioning.Transport.Amqp" Version="1.*" />
        <PackageReference Include="Microsoft.Azure.Devices.Provisioning.Transport.Http" Version="1.*" />
    </ItemGroup>
    ```

    This configuration ensures that the `sensor-thl-2000-device.cert.pfx` certificate file is copied to the build folder when the C# code is compiled, and made available for the program to access when it executes.

1. On the Visual Studio Code **File** menu, click **Save**.

    **Note**: If you are prompted by Visual Studio Code to Restore, do that now.

1. In the **EXPLORER** pane, click **Program.cs**.

    A cursory glance will reveal that this version of the **ContainerDevice** application is virtually identical to the version used in the preceding lab. The only changes will be those that relate specifically to the use of X.509 certificates as an attestation mechanism. From the application perspective, it matters little that this device will be connecting via a Group Enrollment vs an Individual Enrollment.

1. Locate the **GlobalDeviceEndpoint** variable, and notice that its value is set to the Global Device Endpoint for the Azure Device Provisioning Service (`global.azure-devices-provisioning.net`).

    Within the Public Azure Cloud, **global.azure-devices-provisioning.net** is the Global Device Endpoint for the Device Provisioning Service (DPS). All devices connecting to Azure DPS will be configured with this Global Device Endpoint DNS name. You should see code that is similar to the following:

    ```csharp
    private const string GlobalDeviceEndpoint = "global.azure-devices-provisioning.net";
    ```

1. Locate the **dpsIdScope** variable, and update the assigned value using the **ID Scope** that you copied from the Overview pane of the Device Provisioning Service.

    When you have updated your code, it should look similar to the following:

    ```csharp
    private static string dpsIdScope = "0ne000CBD6C";
    ```

1. Locate the **certificateFileName** variable, and notice that its value is set to the default name of the device certificate file that you generated (**new-device.cert.pfx**).

    Rather than using symmetric keys as in the earlier lab, this time the application is using an X.509 certificate. The **new-device.cert.pfx** file is the X.509 device certificate file that you generated using the **certGen.sh** helper script within the Cloud Shell. This variable tells the device code which file contains the X.509 device certificate that it will use when authenticating with the Device Provisioning Service.

1. Update the value assigned to the **certificateFileName** variable as follows:

    ```csharp
    private static string certificateFileName = "sensor-thl-2000-device.cert.pfx";
    ```

1. Locate the **certificatePassword** variable, and notice that its value is set to the default password defined by the **certGen.sh** script.

    The **certificatePassword** variable contains the password for the X.509 device certificate. It's set to `1234`, as this is the default password used by the **certGen.sh** helper script when generating the X.509 certificates.

    > An HSM (Hardware Security Module), is used for secure, hardware-based storage of device secrets, and is the most secure form of secret storage. Both X.509 certificates and SAS tokens can be stored in the HSM. HSMs can be used with all attestation mechanisms the provisioning service supports. HMS will be discussed in more detail later in this course.

1. On the Visual Studio Code **File** menu, click **Save**.

    Your simulated device will now use the device twin properties from Azure IoT Hub to set the delay between telemetry messages.

1. On the **Terminal** menu, click **New Terminal**.

1. At the Terminal command prompt, to verify that you code will build correctly, enter **dotnet build**

    If you see build error listed, fix them now before continuing to the next exercise. Work with your instructor if needed.

1. To build and run the **ContainerDevice** project, enter the following command:

    ```cmd/sh
    dotnet run
    ```

    > **Note**:  When you run your simulated device for the first time, the most common error is an _Invalid certificate_ error. If a `ProvisioningTransportException` exception is displayed, it is most likely due to this error. If you see a message similar to the one shown below, you will need to ensure that the CA Certificate in DPS, and the Device Certificate for the simulated device application are configured correctly before you can continue.
    >
    > ```text
    > localmachine:LabFiles User$ dotnet run
    > Found certificate: AFF851ED016CA5AEB71E5749BCBE3415F8CF4F37 CN=sensor-thl-2000; PrivateKey: True
    > Using certificate AFF851ED016CA5AEB71E5749BCBE3415F8CF4F37 CN=sensor-thl-2000
    > RegistrationID = sensor-thl-2000
    > ProvisioningClient RegisterAsync . . . Unhandled exception. Microsoft.Azure.Devices.Provisioning.Client.ProvisioningTransportException: {"errorCode":401002,"trackingId":"2e298c80-0974-493c-9fd9-6253fb055ade","message":"Invalid certificate.","timestampUtc":"2019-12-13T14:55:40.2764134Z"}
    >   at Microsoft.Azure.Devices.Provisioning.Client.Transport.ProvisioningTransportHandlerAmqp.ValidateOutcome(Outcome outcome)
    >   at Microsoft.Azure.Devices.Provisioning.Client.Transport.ProvisioningTransportHandlerAmqp.RegisterDeviceAsync(AmqpClientConnection client, String correlationId, DeviceRegistration deviceRegistration)
    >   at Microsoft.Azure.Devices.Provisioning.Client.Transport.ProvisioningTransportHandlerAmqp.RegisterAsync(ProvisioningTransportRegisterMessage message, CancellationToken cancellationToken)
    >   at X509CertificateContainerDevice.ProvisioningDeviceLogic.RunAsync() in /Users/User/Documents/AZ-220/LabFiles/Program.cs:line 121
    >   at X509CertificateContainerDevice.Program.Main(String[] args) in /Users/User/Documents/AZ-220/LabFiles/Program.cs:line 55
    > ...
    > ```

1. Notice that the simulated device app sends output to the Terminal window.

    When the simulated device application is running correctly, the **Terminal** will display the Console output from the app.

    Scroll up to the top of the information displayed in the Terminal window.

    Notice the X.509 certificate was loaded, the device was registered with the Device Provisioning Service, it was assigned to connect to the **iot-az220-training-{your-id}** IoT Hub, and the device twin desired properties are loaded.

    ```text
    localmachine:LabFiles User$ dotnet run
    Found certificate: AFF851ED016CA5AEB71E5749BCBE3415F8CF4F37 CN=sensor-thl-2000; PrivateKey: True
    Using certificate AFF851ED016CA5AEB71E5749BCBE3415F8CF4F37 CN=sensor-thl-2000
    RegistrationID = sensor-thl-2000
    ProvisioningClient RegisterAsync . . . Device Registration Status: Assigned
    ProvisioningClient AssignedHub: iot-az220-training-CP1119.azure-devices.net; DeviceID: sensor-thl-2000
    Creating X509 DeviceClient authentication.
    simulated device. Ctrl-C to exit.
    DeviceClient OpenAsync.
    Connecting SetDesiredPropertyUpdateCallbackAsync event handler...
    Loading Device Twin Properties...
    Desired Twin Property Changed:
    {"$version":1}
    Reported Twin Properties:
    {"telemetryDelay":1}
    Start reading and sending device telemetry...
    ```

    To review the source code for the simulated device, open the `Program.cs` source code file. Look for several `Console.WriteLine` statements that are used to output the messages seen to the console.

1. Notice that JSON formatted telemetry messages are being sent to Azure IoT Hub.

    ```text
    Start reading and sending device telemetry...
    12/9/2019 5:47:00 PM > Sending message: {"temperature":24.047539159212047,"humidity":67.00504162675004,"pressure":1018.8478924248358,"latitude":40.129349260196875,"longitude":-98.42877188146265}
    12/9/2019 5:47:01 PM > Sending message: {"temperature":26.628804161040485,"humidity":68.09610794675355,"pressure":1014.6454375411363,"latitude":40.093269544242695,"longitude":-98.22227128174003}
    ```

    Once the simulated device has passed through the initial start up, it will begin sending simulated sensor telemetry messages to Azure IoT Hub.

    Notice that the delay, as defined by the `telemetryDelay` Device Twin Property, between each message sent to IoT Hub is currently delaying **1 second** between sending sensor telemetry messages.

1. Leave the simulated device running.

#### Change the device configuration through its twin

With the simulated devices running, the `telemetryDelay` configuration can be updated by editing the device twin Desired State within Azure IoT Hub.

1. Open the **Azure portal**, and then navigate to your **Azure IoT Hub** service.

1. On the left-side menu of your IoT hub blade, under **Explorers**, click **IoT devices**.

1. Within the list of IoT devices, click **sensor-thl-2000**.

    > **IMPORTANT**: Make sure you select the device from this lab. You may also see a device named _sensor-th-0001_ that was created earlier in the course.

1. On the **sensor-thl-2000** device blade, at the top of the blade, click **Device Twin**.

    On the **Device twin** blade, there is an editor with the full JSON for the device twin. This enables you to view and/or edit the device twin state directly within the Azure portal.

1. Locate the `properties.desired` node within the Device Twin JSON.

1. Update the `telemetryDelay` property to have the value of `"2"`.

    This will update the `telemetryDelay` of the simulated device to send sensor telemetry every **2 seconds**.

    The resulting JSON for this section of the device twin desired properties will look similar to the following:

    ```json
    "properties": {
        "desired": {
          "telemetryDelay": "2",
          "$metadata": {
            "$lastUpdated": "2019-12-09T22:48:05.9703541Z",
            "$lastUpdatedVersion": 2,
            "telemetryDelay": {
              "$lastUpdated": "2019-12-09T22:48:05.9703541Z",
              "$lastUpdatedVersion": 2
            }
          },
          "$version": 2
        },
    ```

    Leave the `$metadata` and `$version` value of the `properties.desired` node within the JSON. You should only update the `telemetryDelay` value to set the new device twin desired property value.

1. At the top of the blade, to apply the device twin desired properties for the device, click **Save**.

    Once saved, the updated device twin desired properties will automatically be sent to the simulated device.

1. Switch back to the **Visual Studio Code** window that contains the original **ContainerDevice** project.

1. Notice that the application has been notified of the updated device twin `telemetryDelay` desired property setting.

    The application outputs messages to the Console that show that the new device twin desired properties have been loaded, and the changes have been set and reported back to the Azure IoT Hub.

    ```text
    Desired Twin Property Changed:
    {"telemetryDelay":2,"$version":2}
    Reported Twin Properties:
    {"telemetryDelay":2}
    ```

1. Notice the simulated device sensor telemetry messages are now being sent to Azure IoT Hub every _2_ seconds.

    ```text
    12/9/2019 5:48:07 PM > Sending message: {"temperature":33.89822140284731,"humidity":78.34939097908763,"pressure":1024.9467544610131,"latitude":40.020042418755764,"longitude":-98.41923808825841}
    12/9/2019 5:48:09 PM > Sending message: {"temperature":27.475786026323114,"humidity":64.4175510594703,"pressure":1020.6866468579678,"latitude":40.2089999240047,"longitude":-98.26223221770334}
    12/9/2019 5:48:11 PM > Sending message: {"temperature":34.63600901637041,"humidity":60.95207713588703,"pressure":1013.6262313688063,"latitude":40.25499096898331,"longitude":-98.51199886959347}
    ```

1. Within the **Terminal** pane, to exit the simulated device app, press **Ctrl-C**.

1. Switch to each of your Visual Studio Code windows and use the **Terminal** prompt to close the simulated device apps.

1. Switch the Azure portal window.

1. Close the **Device twin** blade.

1. On the **sensor-thl-2000** blade, click **Device Twin**.

1. Scroll down to locate the JSON for the `properties.reported` object.

    This contains the state reported by the device.

1. Notice that the `telemetryDelay` property exists here as well, and that it has also been set to `2`.

    There is also a `$metadata` value that shows you when the `reported` values were last updated.

1. Again close the **Device twin** blade.

1. Close the **sensor-thl-2000** blade, and then navigate back to your Azure portal Dashboard.

### Exercise 6: Deprovision a single device from the Group Enrollment

There are many reasons why you might need to deprovision just a portion of the devices that are registered as part of a group enrollment. For example, a device may no longer be needed, a newer version of the device may have become available, or it may have been broken or compromised.

To deprovision a single device from an enrollment group, you must do two things:

* Create a disabled individual enrollment for the device's leaf (device) certificate.

    This revokes access to the provisioning service for that device while still permitting access for other devices that have the enrollment group's signing certificate in their chain. Note that you should not delete the disabled individual enrollment for the device, as doing so would allow the device to re-enroll through the enrollment group.

* Disable or delete the device from the IoT hub's identity registry.

    If your solution includes multiple IoT hubs, you should use the list of provisioned devices for the enrollment group to find the IoT hub that the device was provisioned to (so that you can disable or delete the device). In this case you have a single IoT hub, so you don't need to look up which IoT hub was used.

In this exercise, you will deprovision a single device from an enrollment group.

#### Task 1: Create a disabled individual enrollment for the device.

In this task, you will use the **sensor-thl-2001** device for the individual enrollment.

1. If necessary, log in to your Azure portal using your Azure account credentials.

    If you have more than one Azure account, be sure that you are logged in with the account that is tied to the subscription that you will be using for this course.

1. On the Azure portal toolbar, click **Cloud Shell**

    The Azure portal toolbar runs across the top of the portal window. The Cloud Shell button is the 6th in from the right.

1. Verify that the Cloud Shell is using **Bash**.

    The dropdown in the top-left corner of the Azure Cloud Shell page is used to select the environment. Verify that the selected dropdown value is **Bash**.

1. At the Cloud Shell command prompt, to navigate to the `~/certificates` directory, enter the following command:

    ```sh
    cd ~/certificates
    ```

1. To download the .pem device certificates from the Cloud Shell to your local machine, enter the following commands:

    ```sh
    download ~/certificates/certs/sensor-thl-2001-device.cert.pem
    ```

1. Switch to your Azure Dashboard.

1. On your Resources tile, click **FIS-IoTHub-Dps**.

1. On the left-side menu of your DPS blade, under **Settings**, click **Manage enrollments**.

1. On the **Manage enrollments** pane, click **Add individual enrollment**.

1. On the **Add Enrollment** blade, under **Mechanism**, ensure that **X.509** is selected.

1. Under **Primary Certificate .pem or .cer file**, click **Open**.

1. In the **Open** dialog, navigate to the downloads folder.

1. In the downloads folder, click **sensor-thl-2001-device.cert.pem**, and then click **Open**.

1. On the **Add Enrollment** blade, under **IoT Hub Device ID**, enter **sensor-thl-2001**

1. Under **Enable entry**, click **Disable**.

1. At the top of the blade, click **Save**.

1. Navigate back to your Azure Dashboard.

#### Task 2: Deregister the device from IoT hub

1. On the Resources tile, click **iot-az220-training-{your-id}**.

1. On the left-side mnu of your IoT hub blade, under **Device management**, click **Devices**.

1. On the **IoT devices** pane, under **DEVICE ID**, locate the **sensor-thl-2001** device.

1. To the loft of **sensor-thl-2001**, click the checkbox.

1. At the top of the **IoT devices** pane, click **Delete**, and then click **Yes**.

#### Task 3: Confirm that the device is deprovisioned

1. Switch to the Visual Studio Code window containing your ContainerDevice2004 code project.

    If you closed Visual Studio Code after the previous exercise, use Visual Studio Code to open the ContainerDevice2004 folder.

1. On the **View** menu, click **Terminal**.

1. Ensure that the command prompt is located at the **ContainerDevice2001** folder location.

1. To begin running the simulated device app, enter the following command:

    ```cmd/sh
    dotnet run
    ```

1. Notice the exceptions listed when the device attempts to provision.

    When a device attempts to connect and authenticate with Device Provisioning Service, the service first looks for an individual enrollment that matches the device's credentials. The service then searches enrollment groups to determine whether the device can be provisioned. If the service finds a disabled individual enrollment for the device, it prevents the device from connecting. The service prevents the connection even if an enabled enrollment group for an intermediate or root CA in the device's certificate chain exists.

    When the application attempts to use the configured X.509 certificate to connect to DPS, DPS reports DeviceRegistrationResult.Status is NOT 'Assigned'.

    ```txt
    Found certificate: 13F32448E03F451E897B681758BAC593A60BFBFA CN=sensor-thl-2001; PrivateKey: True
    Using certificate 13F32448E03F451E897B681758BAC593A60BFBFA CN=sensor-thl-2001
    ProvisioningClient AssignedHub: ; DeviceID:
    Unhandled exception. System.Exception: DeviceRegistrationResult.Status is NOT 'Assigned'
    at ContainerDevice.Program.ProvisionDevice(ProvisioningDeviceClient provisioningDeviceClient, SecurityProviderX509Certificate security) in C:\Users\howdc\Allfiles\Labs\06-Automatic Enrollment of Devices
    in DPS\Final\ContainerDevice2004\Program.cs:line 107
    at ContainerDevice.Program.Main(String[] args) in C:\Users\howdc\Allfiles\Labs\06-Automatic Enrollment of Devices in DPS\Final\ContainerDevice2004\Program.cs:line 49
    at ContainerDevice.Program.<Main>(String[] args)
    ```

    If you were to go back into your Azure portal and either enable the individual enrollment or delete the individual enrollment, the device will once again be able to authenticate with DPS and connect to IoT hub. If the individual enrollment is deleted, the device is automatically added back to the group enrollment.

### Exercise 7: Deprovision the Group Enrollment

In this exercise, you will deprovision the full enrollment group. Again, this includes disenrolling from Device Provisioning Service and deregistering the devices from IoT Hub.

#### Task 1: Disenroll the enrollment group from the DPS


In this task, you will delete your Enrollment Group, which will remove the enrolled devices.

1. Navigate to your Azure Dashboard.

1. On your Resources tile, click **FIS-IoTHub-Dps**.

1. On the left-side menu of your DPS blade, under **Settings**, click **Manage enrollments**.

1. In the list of **Enrollment Groups**, under **GROUP NAME**, click **eg-test-simulated-devices**.

1. On the **Enrollment Group Details** blade, scroll down to locate the **Enable entry** field, and then click **Disable**.

    Disabling the Group Enrollment within DPS allows you to temporarily disable devices within this Enrollment Group. This provides a temporary list of the X.509 certificate that should not be used by these devices.

1. At the top of the blade, click **Save**.

    If you run one of your simulated devices now, you will see an error message similar to what you saw with the disabled individual enrollment.

    To permanently delete the Enrollment Group, you must delete the enrollment group from DPS.

1. On the **Manage enrollments** pane, under **GROUP NAME**, select the check box to the left of **eg-test-simulated-devices**.

    If the check box to the left of **simulated-devices** was already checked, leave it checked.

1. At the top of the **Manage enrollments** pane, click **Delete**.

1. When prompted to confirm the action to **Remove enrollment**, click **Yes**.

    Once deleted, the Group Enrollment is completely removed from DPS, and would need to be recreated to add it back.

    > **Note**:  If you delete an enrollment group for a certificate, devices that have the certificate in their certificate chain might still be able to enroll if a different, enabled enrollment group still exists for the root certificate or another intermediate certificate higher up in their certificate chain.

1. Navigate back to your Azure portal Dashboard

#### Task 2: Deregister the devices from the IoT Hub

Once the enrollment group has been removed from the Device Provisioning Service (DPS), the device registration will still exist within Azure IoT Hub. To fully deprovision the devices, you will need to remove that registration as well.

1. On your Resources tile, click **iot-az220-training-{your-id}**.

1. On the left-side menu of your IoT hub blade, under **Device management**, click **Devices**.

1. Notice that the device IDs for **sensor-thl-2000** and the other group enrolled devices still exist within the Azure IoT Hub device registry.

1. To remove the sensor-thl-2000 device, select the check box to the left of **sensor-thl-2000**, then click **Delete**.

1. When prompted with "_Are you certain you wish to delete selected device(s)_", click **Yes**.

1. Repeat the steps 4-5 above to remove the sensor-thl-2001 device.

#### Task 3: Confirm that your devices have been deprovisioned

With the group enrollment deleted from the Device Provisioning Service, and the device deleted from the Azure IoT Hub device registry, the device(s) have been fully removed from the solution.

1. Switch to the Visual Studio Code window containing your ContainerDevice code project.

    If you closed Visual Studio Code after the previous exercise, use Visual Studio Code to open the lab 6 Final folder.

1. On the Visual Studio Code **View** menu, click **Terminal**.

1. Ensure that the command prompt is located at the **ContainerDevice** folder location.

1. To begin running the simulated device app, enter the following command:

    ```cmd/sh
    dotnet run
    ```

1. Notice the exceptions listed when the device attempts to provision.

    Now that the group enrollment and registered device have been deleted, the simulated device will no longer be able to provision or connect. When the application attempts to use the configured X.509 certificate to connect to DPS, it will return a `ProvisioningTransportException` error message.

    ```txt
    Found certificate: AFF851ED016CA5AEB71E5749BCBE3415F8CF4F37 CN=sensor-thl-2000; PrivateKey: True
    Using certificate AFF851ED016CA5AEB71E5749BCBE3415F8CF4F37 CN=sensor-thl-2000
    RegistrationID = sensor-thl-2000
    ProvisioningClient RegisterAsync . . . Unhandled exception. Microsoft.Azure.Devices.Provisioning.Client.ProvisioningTransportException: {"errorCode":401002,"trackingId":"df969401-c766-49a4-bab7-e769cd3cb585","message":"Unauthorized","timestampUtc":"2019-12-20T21:30:46.6730046Z"}
       at Microsoft.Azure.Devices.Provisioning.Client.Transport.ProvisioningTransportHandlerAmqp.ValidateOutcome(Outcome outcome)
       at Microsoft.Azure.Devices.Provisioning.Client.Transport.ProvisioningTransportHandlerAmqp.RegisterDeviceAsync(AmqpClientConnection client, String correlationId, DeviceRegistration deviceRegistration)
       at Microsoft.Azure.Devices.Provisioning.Client.Transport.ProvisioningTransportHandlerAmqp.RegisterAsync(ProvisioningTransportRegisterMessage message, CancellationToken cancellationToken)
    ```

You have completed the registration, configuration, and deprovisioning as part of the IoT devices life cycle with Device Provisioning Service.

name: Release

on:
  create:
    tags:
      - v*

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        sudo apt-get install libusb-1.0-0-dev
        python -m pip install --upgrade pip
        pip install setuptools twine pip wheel awscli
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Get Version
      id: version
      run: |
        cd src
        # Parse version
        VERSION=$(../scripts/get_version.sh)
        echo "Setting release version to $VERSION"
        echo "::set-env name=RELEASE_VERSION::$VERSION"

    - name: Release Mac
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-west-2
        VERSION: ${{ env.RELEASE_VERSION }}
      run: |

        aws s3 cp s3://dwarf-website/releases/cli/unstable/darwin/dwarf.zip s3://dwarf-website/releases/cli/latest/darwin/dwarf.zip

        echo "Deploying darwin dwarf to s3://dwarf-website/releases/cli/${VERSION}/darwin/dwarf.zip"
        aws s3 cp s3://dwarf-website/releases/cli/unstable/darwin/dwarf.zip "s3://dwarf-website/releases/cli/${VERSION}/darwin/dwarf.zip"

        echo "Deploying darwin dwarf to s3://dwarf-website/releases/cli/latest/darwin/dwarf.tar.gz"
        aws s3 cp s3://dwarf-website/releases/cli/unstable/darwin/dwarf.tar.gz s3://dwarf-website/releases/cli/latest/darwin/dwarf.tar.gz

        echo "Deploying darwin dwarf to s3://dwarf-website/releases/cli/${VERSION}/darwin/dwarf.tar.gz"
        aws s3 cp s3://dwarf-website/releases/cli/unstable/darwin/dwarf.tar.gz "s3://dwarf-website/releases/cli/${VERSION}/darwin/dwarf.tar.gz"

    - name: Release Linux
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-west-2
        VERSION: ${{ env.RELEASE_VERSION }}
      run: |

        aws s3 cp s3://dwarf-website/releases/cli/unstable/linux/dwarf.zip s3://dwarf-website/releases/cli/latest/linux/dwarf.zip

        echo "Deploying linux dwarf to s3://dwarf-website/releases/cli/${VERSION}/linux/dwarf.zip"
        aws s3 cp s3://dwarf-website/releases/cli/unstable/linux/dwarf.zip "s3://dwarf-website/releases/cli/${VERSION}/linux/dwarf.zip"

        echo "Deploying linux dwarf to s3://dwarf-website/releases/cli/latest/linux/dwarf.tar.gz"
        aws s3 cp s3://dwarf-website/releases/cli/unstable/linux/dwarf.tar.gz s3://dwarf-website/releases/cli/latest/linux/dwarf.tar.gz

        echo "Deploying linux dwarf to s3://dwarf-website/releases/cli/${VERSION}/linux/dwarf.tar.gz"
        aws s3 cp s3://dwarf-website/releases/cli/unstable/linux/dwarf.tar.gz "s3://dwarf-website/releases/cli/${VERSION}/linux/dwarf.tar.gz"

    - name: Release Windows
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-west-2
        VERSION: ${{ env.RELEASE_VERSION }}
      run: |

        aws s3 cp s3://dwarf-website/releases/cli/unstable/windows/dwarf.zip s3://dwarf-website/releases/cli/latest/windows/dwarf.zip

        echo "Deploying windows dwarf to s3://dwarf-website/releases/cli/${VERSION}/windows/dwarf.zip"
        aws s3 cp s3://dwarf-website/releases/cli/unstable/windows/dwarf.zip "s3://dwarf-website/releases/cli/${VERSION}/windows/dwarf.zip"

        echo "Deploying windows dwarf to s3://dwarf-website/releases/cli/latest/windows/dwarf.tar.gz"
        aws s3 cp s3://dwarf-website/releases/cli/unstable/windows/dwarf.tar.gz s3://dwarf-website/releases/cli/latest/windows/dwarf.tar.gz

        echo "Deploying windows dwarf to s3://dwarf-website/releases/cli/${VERSION}/windows/dwarf.tar.gz"
        aws s3 cp s3://dwarf-website/releases/cli/unstable/windows/dwarf.tar.gz "s3://dwarf-website/releases/cli/${VERSION}/windows/dwarf.tar.gz"


    - name: Upload To PyPi
      env:
        PYPI_RC: ${{ secrets.PYPI_DWARF_CLI }}
      run: |
        echo "${PYPI_RC}" > ~/.pypirc
        cd src
        ../scripts/deploy-pypi.sh

    - name: Prep Release
      id: prep
      run: |
        cd src
        # Parse version
        VERSION=$(../scripts/get_version.sh)
        echo "Setting release version to $VERSION"
        echo "::set-env name=RELEASE_VERSION::$VERSION"

        # Parse changelog
        CHANGELOG=$(../scripts/parse_changelog.sh)
        CHANGELOG="${CHANGELOG//'%'/'%25'}"
        CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
        CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

        echo "Got changelog: $CHANGELOG"
        echo "::set-output name=changelog::$CHANGELOG"

    - name: Create Release
      id: create_release
      uses: actions/create-release@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        release_name: Release ${{ env.RELEASE_VERSION }}
        body: ${{ steps.prep.outputs.changelog }}
        draft: false
        prerelease: true

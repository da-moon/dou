#-----------------------------------------------------------------------------------------------------------------
# Example configuration for using SQL as a caching store for clouddriver.
#
# Documentation: https://spinnaker.io/setup/productionize/persistence/clouddriver-sql/
#-----------------------------------------------------------------------------------------------------------------
apiVersion: spinnaker.armory.io/v1alpha2
kind: SpinnakerService
metadata:
  name: spinnaker
spec:
  spinnakerConfig:
    profiles:
      clouddriver:
        sql:
          enabled: true
#          unknown-agent-cleanup-agent:
#            enabled: true
          taskRepository:
            enabled: true
          cache:
            enabled: true
            # These parameters were determined to be optimal via benchmark comparisons
            # in the Netflix production environment with Aurora. Setting these too low
            # or high may negatively impact performance. These values may be sub-optimal
            # in some environments.
            readBatchSize: 500
            writeBatchSize: 300
          scheduler:
            enabled: true # disabled for Google CloudSQL and Amazon Managed RDS SQL https://spinnaker.io/setup/productionize/persistence/clouddriver-sql/#agent-scheduling
          connectionPools:
            default:
              # additional connection pool parameters are available here,
              # for more detail and to view defaults, see:
              # https://github.com/spinnaker/kork/blob/master/kork-sql/src/main/kotlin/com/netflix/spinnaker/kork/sql/config/ConnectionPoolProperties.kt
              default: true
              user: clouddriver_service
              jdbcUrl: jdbc:mysql:aws://armory-aurora.cluster-cixhbyd62zv2.us-west-2.rds.amazonaws.com:3306/clouddriver?acceptAwsProtocolOnly=true&useAwsIam=true&maxAllowedPacket=25165824
          migration:
            user: clouddriver_migrate
            jdbcUrl: jdbc:mysql:aws://armory-aurora.cluster-cixhbyd62zv2.us-west-2.rds.amazonaws.com:3306/clouddriver?acceptAwsProtocolOnly=true&useAwsIam=true&maxAllowedPacket=25165824

#        dualTaskRepository: # Maintaining Task Repository Availability While Migrating from Redis to SQL in production https://spinnaker.io/setup/productionize/persistence/clouddriver-sql/#maintaining-task-repository-availability-while-migrating-from-redis-to-sql
#          enabled: false
#          primaryClass: com.netflix.spinnaker.clouddriver.sql.SqlTaskRepository
#          previousClass: com.netflix.spinnaker.clouddriver.data.task.jedis.RedisTaskRepository
#
        redis:
          enabled: false                   # only required if using externally managed redis AND Google CloudSQL or Amazon Managed RDS SQL
          # connection: redis://redis:6379  # only required if using externally managed redis AND Google CloudSQL or Amazon Managed RDS SQL
          cache:
            enabled: false
          scheduler:
            enabled: false # enabled for Google CloudSQL and Amazon Managed RDS SQL https://spinnaker.io/setup/productionize/persistence/clouddriver-sql/#agent-scheduling
          taskRepository:
            enabled: false

        # These parameters help throttle Spinnaker's API calls
        # Default rate limit is 10 req/sec. Adjust and tune as necessary
        # For more details see https://docs.armory.io/docs/armory-admin/rate-limit/
        serviceLimits:
          defaults:
            rateLimit: 10.0
          cloudProviderOverrides:
            aws:
              rateLimit: 10.0
          implementationLimits:
            AmazonAutoScaling:
              defaults:
                rateLimit: 10.0
            AmazonElasticLoadBalancing:
              defaults:
                rateLimit: 10.0
